# Disable analytics to prevent non-interactive prompts in CI
opt_out_usage

# Force non-interactive mode for CI
ENV['FASTLANE_SKIP_UPDATE_CHECK'] = 'true'
ENV['FASTLANE_HIDE_CHANGELOG'] = 'true'
ENV['SNAPSHOT_SKIP_HELPER_VERSION_CHECK'] = 'true'

default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
    
    # Set Xcode version and path for consistent builds
    if is_ci
      # CircleCI uses versioned Xcode installations - try multiple versions
      xcode_versions = ["/Applications/Xcode-16.4.app", "/Applications/Xcode-16.3.app", "/Applications/Xcode.app"]
      selected_xcode = xcode_versions.find { |path| File.directory?(path) }
      
      if selected_xcode
        UI.message("üîß Using Xcode: #{selected_xcode}")
        xcode_select(selected_xcode)
      else
        UI.error("‚ùå No suitable Xcode installation found. Checked: #{xcode_versions.join(', ')}")
        UI.message("Available Xcode installations:")
        system("ls -la /Applications/ | grep -i xcode || echo 'No Xcode installations found'")
        raise "No suitable Xcode installation found"
      end
    else
      # Local development - use default Xcode
      xcode_select("/Applications/Xcode.app")
    end
    
    # Verify Xcode version for consistency (flexible for CI environments)
    if is_ci
      # On CI, just log the version we're using
      current_version = sh("xcodebuild -version | head -1", log: false).strip
      UI.message("Using Xcode version: #{current_version}")
    else
      # Local development - just warn if version differs
      begin
        ensure_xcode_version(version: "16.0")
      rescue => ex
        UI.important("‚ö†Ô∏è  Local Xcode version may differ from CI: #{ex}")
      end
    end
    
    UI.message("Using Xcode: #{sh("xcode-select -p").strip}")
    UI.message("Xcode version: #{sh("xcodebuild -version | head -1").strip}")
    
    # Clean build environment on CI for consistent builds
    if is_ci
      UI.message("üßπ Cleaning derived data for fresh CI build...")
      clear_derived_data
    end
  end
  
  # Helper method to detect if running in CI environment
  def is_ci
    ENV['CI'] == 'true' || ENV['CIRCLECI'] == 'true'
  end
  
  # Validate build environment before running lanes
  def validate_build_environment
    UI.message("üîç Validating build environment...")
    
    # Check available iOS SDKs
    begin
      ios_sdks = sh("xcodebuild -showsdks | grep -E 'iphoneos[0-9]' | awk '{print $NF}'", log: false).split("\n").reject(&:empty?)
      UI.message("Available iOS SDKs: #{ios_sdks.join(', ')}")
      
      if ios_sdks.empty?
        UI.error("‚ùå No iOS SDKs found!")
        raise "No iOS SDKs available"
      end
      
      # Use the latest available iOS SDK
      latest_sdk = ios_sdks.last
      UI.message("Using latest iOS SDK: #{latest_sdk}")
      
    rescue => e
      UI.error("Error checking iOS SDKs: #{e}")
      UI.important("Continuing with default SDK...")
    end
    
    # Check available simulators (with fallback)
    begin
      available_simulators = sh("xcrun simctl list devices | grep -E 'iPhone [0-9]' | sed 's/.*iPhone /iPhone /' | sed 's/ (.*//' | sort -u", log: false).split("\n").reject(&:empty?)
      UI.message("Available iPhone simulators: #{available_simulators.join(', ')}")
      
      # Find best available iPhone simulator
      preferred_devices = ["iPhone 15", "iPhone 14", "iPhone 13", "iPhone 12", "iPhone 11"]
      selected_device = preferred_devices.find { |device| available_simulators.any? { |sim| sim.include?(device) } }
      
      if selected_device
        UI.message("‚úÖ Using simulator: #{selected_device}")
      else
        UI.important("‚ö†Ô∏è  No preferred simulators found. Available: #{available_simulators.join(', ')}")
        UI.important("Will use default simulator")
      end
      
    rescue => e
      UI.error("Error checking simulators: #{e}")
      UI.important("Continuing with default simulator...")
    end
    
    UI.success("‚úÖ Build environment validation complete")
  end

  desc "Runs all the tests"
  lane :test do
    validate_build_environment
    
    scan(
      scheme: "Game",
      devices: ['iPhone 14'],
      output_directory: "output/scan",
      code_coverage: true,
      clean: is_ci  # Clean build on CI
    )
  end

  desc "Ad-hoc build"
  lane :adhoc do
    validate_build_environment
    
    # Use fastlane match for ad-hoc certificates and provisioning profiles
    match(type: "adhoc", readonly: true)
    
    # Build for ad-hoc distribution
    gym(
      scheme: "Game",
      export_method: "ad-hoc",
      output_directory: "output",
      output_name: "Game.ipa",
      clean: is_ci  # Clean build on CI
    )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  lane :beta do
    validate_build_environment
    
    UI.message("üöÄ Starting TestFlight build process...")
    
    # Check authentication method - prefer App Store Connect API key
    use_api_key = !ENV['APP_STORE_CONNECT_API_KEY_ID'].nil? && !ENV['APP_STORE_CONNECT_API_KEY_ID'].empty?
    
    if use_api_key
      UI.message("üîë Using App Store Connect API Key authentication (bypasses 2FA)")
      
      # Validate required environment variables for API key
      required_env_vars = ['APP_STORE_CONNECT_API_KEY_ID', 'APP_STORE_CONNECT_API_ISSUER_ID', 'APP_STORE_CONNECT_API_KEY_CONTENT', 'APPLE_TEAM_ID']
      missing_vars = required_env_vars.select { |var| ENV[var].nil? || ENV[var].empty? }
      
      if !missing_vars.empty?
        UI.error("‚ùå Missing required environment variables for API Key: #{missing_vars.join(', ')}")
        UI.error("Please set these variables in CircleCI project settings:")
        UI.error("- APP_STORE_CONNECT_API_KEY_ID: Your API Key ID from App Store Connect")
        UI.error("- APP_STORE_CONNECT_API_ISSUER_ID: Your Issuer ID from App Store Connect")
        UI.error("- APP_STORE_CONNECT_API_KEY_CONTENT: Base64 encoded content of your .p8 key file")
        UI.error("- APPLE_TEAM_ID: Your Apple Developer Team ID")
        raise "Missing required environment variables: #{missing_vars.join(', ')}"
      end
      
      # Setup App Store Connect API Key
      UI.message("üîç Debugging API Key setup...")
      UI.message("Key ID length: #{ENV['APP_STORE_CONNECT_API_KEY_ID']&.length || 0}")
      UI.message("Issuer ID length: #{ENV['APP_STORE_CONNECT_API_ISSUER_ID']&.length || 0}")
      UI.message("Key content length: #{ENV['APP_STORE_CONNECT_API_KEY_CONTENT']&.length || 0}")
      
      # Validate key content format
      if ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
        decoded_key = Base64.decode64(ENV['APP_STORE_CONNECT_API_KEY_CONTENT'])
        UI.message("Decoded key starts with: #{decoded_key[0..20]}...")
        UI.message("Decoded key ends with: ...#{decoded_key[-20..-1]}")
        
        if decoded_key.include?('BEGIN PRIVATE KEY') && decoded_key.include?('END PRIVATE KEY')
          UI.message("‚úÖ Key content appears to be valid P8 format")
        else
          UI.error("‚ùå Key content doesn't appear to be valid P8 format")
          UI.error("Expected: -----BEGIN PRIVATE KEY----- ... -----END PRIVATE KEY-----")
        end
      end
      
      app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_API_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY_CONTENT'],
        is_key_content_base64: true
      )
      
      UI.message("Using API Key ID: #{ENV['APP_STORE_CONNECT_API_KEY_ID']}")
      UI.message("Team ID: #{ENV['APPLE_TEAM_ID']}")
      UI.message("App Identifier: com.circleci.ios-game-demo")
      
    else
      UI.message("üîê Using Apple ID authentication (requires app-specific password)")
      
      # Validate required environment variables for Apple ID
      required_env_vars = ['FASTLANE_USER', 'FASTLANE_PASSWORD', 'APPLE_TEAM_ID']
      missing_vars = required_env_vars.select { |var| ENV[var].nil? || ENV[var].empty? }
      
      if !missing_vars.empty?
        UI.error("‚ùå Missing required environment variables: #{missing_vars.join(', ')}")
        UI.error("Please set these variables in CircleCI project settings:")
        UI.error("- FASTLANE_USER: Your Apple ID email")
        UI.error("- FASTLANE_PASSWORD: App-specific password from Apple ID settings")
        UI.error("- APPLE_TEAM_ID: Your Apple Developer Team ID")
        UI.error("")
        UI.error("üí° For easier CI/CD without 2FA, consider using App Store Connect API Key instead:")
        UI.error("- APP_STORE_CONNECT_API_KEY_ID")
        UI.error("- APP_STORE_CONNECT_API_ISSUER_ID") 
        UI.error("- APP_STORE_CONNECT_API_KEY_CONTENT")
        raise "Missing required environment variables: #{missing_vars.join(', ')}"
      end
      
      # Debug credentials (without exposing password)
      UI.message("Using Apple ID: #{ENV['FASTLANE_USER']}")
      UI.message("Team ID: #{ENV['APPLE_TEAM_ID']}")
      UI.message("App Identifier: com.circleci.ios-game-demo")
      UI.message("‚úÖ Password is configured (length: #{ENV['FASTLANE_PASSWORD'].length})")
      
      # Debug password format (check for asterisks)
      password = ENV['FASTLANE_PASSWORD']
      if password&.include?('*')
        UI.error("‚ùå FASTLANE_PASSWORD contains asterisks! You may have copied masked text.")
        UI.error("Password preview: #{password[0..2]}...#{password[-3..-1]} (showing first 3 and last 3 chars)")
      else
        UI.message("üîç Password format check: #{password[0]}...#{password[-1]} (first and last chars)")
      end
    end
    
    UI.message("üîß Will override project team ID with: #{ENV['APPLE_TEAM_ID']}")
    
    UI.message("üì± Fetching latest TestFlight build number...")
    
    # Get the latest TestFlight build number with authentication
    begin
      if use_api_key
        latest_build = latest_testflight_build_number(
          team_id: ENV['APPLE_TEAM_ID'],
          app_identifier: "com.circleci.ios-game-demo"
        )
      else
        latest_build = latest_testflight_build_number(
          username: ENV['FASTLANE_USER'],
          team_id: ENV['APPLE_TEAM_ID'],
          app_identifier: "com.circleci.ios-game-demo"
        )
      end
      UI.message("‚úÖ Authentication successful! Latest build number: #{latest_build}")
    rescue => ex
      UI.important("‚ö†Ô∏è  TestFlight authentication failed: #{ex}")
      if use_api_key
        UI.important("This is usually caused by:")
        UI.important("1. Invalid API Key ID or Issuer ID")
        UI.important("2. Incorrect API Key content or encoding")
        UI.important("3. API Key doesn't have sufficient permissions")
        UI.important("4. Incorrect APPLE_TEAM_ID")
      else
        UI.important("This is usually caused by:")
        UI.important("1. Missing or incorrect FASTLANE_PASSWORD (should be app-specific password)")
        UI.important("2. Apple ID doesn't have access to this app in App Store Connect")
        UI.important("3. Incorrect APPLE_TEAM_ID")
      end
      UI.important("Continuing with build number 1...")
      latest_build = 0
    end
    
    # Increment build number
    new_build_number = latest_build + 1
    UI.message("Setting new build number to: #{new_build_number}")
    
    increment_build_number(
      build_number: new_build_number
    )
    
    UI.message("üîê Setting up certificates and provisioning profiles with fastlane match...")
    
    # Use fastlane match for App Store certificates and provisioning profiles
    match(type: "appstore", readonly: true)
    
    UI.message("üî® Building the app...")
    
    # Build the app for App Store distribution
    gym(
      scheme: "Game",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.circleci.ios-game-demo" => "match AppStore com.circleci.ios-game-demo"
        },
        signingStyle: "manual",
        teamID: ENV['APPLE_TEAM_ID']
      },
      output_directory: "output",
      output_name: "Game.ipa",
      clean: is_ci,  # Clean build on CI
      configuration: "Release",
      destination: "generic/platform=iOS",
      xcargs: "CODE_SIGN_IDENTITY='Apple Distribution' PROVISIONING_PROFILE_SPECIFIER='match AppStore com.circleci.ios-game-demo' DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']}"
    )
    
    UI.message("üì§ Uploading to TestFlight...")
    
    # Upload to TestFlight with authentication
    if use_api_key
      pilot(
        team_id: ENV['APPLE_TEAM_ID'],
        app_identifier: "com.circleci.ios-game-demo",
        skip_waiting_for_build_processing: true,
        changelog: "Build #{new_build_number} - Automated CI/CD build"
      )
    else
      pilot(
        username: ENV['FASTLANE_USER'],
        team_id: ENV['APPLE_TEAM_ID'],
        app_identifier: "com.circleci.ios-game-demo",
        skip_waiting_for_build_processing: true,
        changelog: "Build #{new_build_number} - Automated CI/CD build"
      )
    end
    
    UI.message("üè∑Ô∏è Tagging release...")
    
    # Tag the release in git
    add_git_tag(
      tag: "v#{get_version_number}-#{new_build_number}"
    )
    
    UI.success("‚úÖ Beta build complete! Build #{new_build_number} uploaded to TestFlight")
  end
  
  desc "Test Apple ID authentication"
  lane :test_auth do
    validate_build_environment
    
    # Check authentication method - prefer App Store Connect API key
    use_api_key = !ENV['APP_STORE_CONNECT_API_KEY_ID'].nil? && !ENV['APP_STORE_CONNECT_API_KEY_ID'].empty?
    
    if use_api_key
      UI.message("Testing App Store Connect API Key authentication...")
      UI.message("API Key ID: #{ENV['APP_STORE_CONNECT_API_KEY_ID']}")
      UI.message("Team ID: #{ENV['APPLE_TEAM_ID']}")
      
      # Setup App Store Connect API Key with debugging
      UI.message("üîç Debugging API Key setup...")
      UI.message("Key ID length: #{ENV['APP_STORE_CONNECT_API_KEY_ID']&.length || 0}")
      UI.message("Issuer ID length: #{ENV['APP_STORE_CONNECT_API_ISSUER_ID']&.length || 0}")
      UI.message("Key content length: #{ENV['APP_STORE_CONNECT_API_KEY_CONTENT']&.length || 0}")
      
      # Validate key content format
      if ENV['APP_STORE_CONNECT_API_KEY_CONTENT']
        decoded_key = Base64.decode64(ENV['APP_STORE_CONNECT_API_KEY_CONTENT'])
        UI.message("Decoded key starts with: #{decoded_key[0..20]}...")
        UI.message("Decoded key ends with: ...#{decoded_key[-20..-1]}")
        
        if decoded_key.include?('BEGIN PRIVATE KEY') && decoded_key.include?('END PRIVATE KEY')
          UI.message("‚úÖ Key content appears to be valid P8 format")
        else
          UI.error("‚ùå Key content doesn't appear to be valid P8 format")
        end
      end
      
      app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_API_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY_CONTENT'],
        is_key_content_base64: true
      )
      
      begin
        latest_build = latest_testflight_build_number(
          team_id: ENV['APPLE_TEAM_ID'],
          app_identifier: "com.circleci.ios-game-demo"
        )
        UI.success("‚úÖ API Key authentication successful! Latest build number: #{latest_build}")
      rescue => ex
        UI.error("‚ùå API Key authentication failed: #{ex}")
        UI.error("Please verify:")
        UI.error("1. APP_STORE_CONNECT_API_KEY_ID is correct")
        UI.error("2. APP_STORE_CONNECT_API_ISSUER_ID is correct")
        UI.error("3. APP_STORE_CONNECT_API_KEY_CONTENT is properly base64 encoded")
        UI.error("4. API Key has sufficient permissions in App Store Connect")
        UI.error("5. APPLE_TEAM_ID is correct")
      end
    else
      UI.message("Testing Apple ID authentication...")
      UI.message("Username: #{ENV['FASTLANE_USER']}")
      UI.message("Team ID: #{ENV['APPLE_TEAM_ID']}")
      
      begin
        latest_build = latest_testflight_build_number(
          username: ENV['FASTLANE_USER'],
          team_id: ENV['APPLE_TEAM_ID'],
          app_identifier: "com.circleci.ios-game-demo"
        )
        UI.success("‚úÖ Authentication successful! Latest build number: #{latest_build}")
      rescue => ex
        UI.error("‚ùå Authentication failed: #{ex}")
        UI.error("Please verify:")
        UI.error("1. FASTLANE_USER is correct Apple ID")
        UI.error("2. FASTLANE_PASSWORD is an app-specific password")
        UI.error("3. Apple ID has access to this app in App Store Connect")
        UI.error("4. APPLE_TEAM_ID is correct")
      end
    end
  end
end