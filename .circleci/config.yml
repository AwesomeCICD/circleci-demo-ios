version: 2.1

orbs:
  aws-s3: circleci/aws-s3@4.1.1
  aws-cli: circleci/aws-cli@5.4.0
  slack: circleci/slack@4.14.0

jobs:
  build-and-test:
    macos:
      xcode: "16.4.0"
    working_directory: /Users/distiller/project
    # default fastlane environment locations
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: Debug iOS SDK Environment
          command: |
            echo "=== Xcode Version ==="
            xcodebuild -version
            echo "=== Available iOS SDKs ==="
            xcodebuild -showsdks | grep -i ios
            echo "=== Available Simulators ==="
            xcrun simctl list devices --json | jq -r '.devices | to_entries[] | select(.key | contains("iOS")) | "\(.key): \(.value | map(.name) | join(", "))"' || echo "jq not available, using basic list:"
            xcrun simctl list devices | grep -E "(iOS|iPhone)"
            echo "=== Project Build Settings ==="
            xcodebuild -showBuildSettings -project Game.xcodeproj -scheme Game | grep -E "(SDKROOT|IPHONEOS_DEPLOYMENT_TARGET|SDK)" | head -10
      - run:
          name: Ruby and Bundle Setup
          command: |
            ruby --version
            gem --version
            bundle --version

            # Fix Ruby 3.4+ compilation environment for macOS
            echo "üîß Setting up Ruby environment for macOS compilation..."
            export BUNDLE_BUILD__JSON="--with-cflags=-I$(brew --prefix)/include"
            export BUNDLE_BUILD__NOKOGIRI="--use-system-libraries"

            # Force modern Bundler version (avoid old 1.17.2 compatibility issues)
            echo "üì¶ Updating to modern Bundler..."
            gem install bundler -v '>= 2.4.0' --no-document || true
            bundle --version

            # Clean old bundler cache and regenerate
            rm -rf vendor/bundle .bundle Gemfile.lock || true

            # Configure bundler for macOS platform
            bundle config set --local path 'vendor/bundle'
            bundle config set --local deployment 'false'
            bundle config set --local platform 'x86_64-darwin-24'
            bundle config set --local without 'development test'

            # Generate new lockfile and install
            bundle lock --add-platform x86_64-darwin-24
            bundle install --jobs 4 --retry 3 --verbose
      - run:
          name: Force Compatible iOS SDK
          command: |
            echo "üîß Setting compatible iOS SDK for build..."
            # Get the latest available iOS SDK
            LATEST_SDK=$(xcodebuild -showsdks | grep iphoneos | tail -1 | awk '{print $NF}')
            echo "Latest available iOS SDK: $LATEST_SDK"

            # Set environment variables to force compatible SDK
            if [ ! -z "$LATEST_SDK" ]; then
              echo "export IPHONEOS_DEPLOYMENT_TARGET=14.0" >> $BASH_ENV
              echo "export SDKROOT=$LATEST_SDK" >> $BASH_ENV
              echo "‚úÖ Set iOS Deployment Target to 14.0"
              echo "‚úÖ Set SDK Root to $LATEST_SDK"
            else
              echo "‚ö†Ô∏è  No iOS SDK found, using defaults"
            fi
      - run:
          name: Fastlane
          command: |
            bundle update fastlane
            bundle exec fastlane $FASTLANE_LANE
      - store_artifacts:
          path: output
      - store_test_results:
          path: output/scan
      - aws-cli/setup:
          use_brew: true
          role_arn: ${AWS_ROLE_ARN}
          region: ${AWS_REGION}
      - run:
          name: Zip build artifact for upload
          # avgtool is Apple's build number management tool
          # what-marketing-version is a command that retrieves build version like "2.10.2" from Info.plist
          # terse1 retrieves only the build number, terse includes additional text
          command: |
            APP_VERSION=$(agvtool what-marketing-version -terse1)
            echo $APP_VERSION
            ZIP_NAME="app-${APP_VERSION}.zip"
            echo $ZIP_NAME
            zip -r $ZIP_NAME . -i ./build
            echo "export ZIP_NAME=${ZIP_NAME}" >> $BASH_ENV
            echo "export APP_VERSION=${APP_VERSION}" >> $BASH_ENV
      - run:
          name: Debug directory structure
          command: |
            ls -la
            ls -la output || echo "No output directory"
      - aws-s3/copy:
          from: ${ZIP_NAME}
          to: s3://${S3_BUCKET_NAME}/builds/
          arguments: |
            --metadata appVersion=${APP_VERSION},buildNumber=${APP_VERSION}
      - persist_to_workspace:
          root: .
          paths:
            - output
      # Debug Slack configuration
      - run:
          name: Debug Slack Configuration
          command: |
            echo "üîç Debugging Slack notification setup..."
            echo "SLACK_ACCESS_TOKEN set: ${SLACK_ACCESS_TOKEN:+Yes}"
            echo "SLACK_WEBHOOK set: ${SLACK_WEBHOOK:+Yes}"
            echo "Current branch: ${CIRCLE_BRANCH}"
            echo "Build status will determine which notification triggers"
            if [ -z "${SLACK_ACCESS_TOKEN}" ] && [ -z "${SLACK_WEBHOOK}" ]; then
              echo "‚ùå Neither SLACK_ACCESS_TOKEN nor SLACK_WEBHOOK is set!"
              echo "Please set one of these in CircleCI project environment variables"
            fi
          when: always
      # Slack notifications
      - slack/notify:
          channel: fe-workout
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚ùå *iOS Build Failed* on `${CIRCLE_BRANCH}` branch\n\n*Project:* ${CIRCLE_PROJECT_REPONAME}\n*Job:* Build & Test\n*Triggered by:* <@${CIRCLE_USERNAME}>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Build"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Commit"
                      },
                      "url": "https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}"
                    }
                  ]
                }
              ]
            }
      - slack/notify:
          channel: fe-workout
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚úÖ *iOS Build Successful* on `${CIRCLE_BRANCH}` branch\n\n*Project:* ${CIRCLE_PROJECT_REPONAME}\n*Job:* Build & Test\n*Triggered by:* <@${CIRCLE_USERNAME}>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Build"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Download Artifacts"
                      },
                      "url": "${CIRCLE_BUILD_URL}/artifacts"
                    }
                  ]
                }
              ]
            }

  adhoc:
    macos:
      xcode: "16.3.0"
    working_directory: /Users/distiller/project
    # default fastlane environment locations
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: adhoc
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "SHA256:dsEgjXw4QYHFwc9yaHjXqLT38fVvFU5UlAEhxlxGJL0"
      - run:
          name: Set Git User
          command: |
            git config --global user.email "fieldeng@circleci.com"
            git config --global user.name "Field Engineering CI User"
      - run:
          name: Add GitHub to known hosts
          command: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Test SSH connection to certificates repository
          command: |
            echo "Testing SSH connection to match repository..."
            ssh -T git@github.com || echo "SSH connection test complete (exit code $?)"
            echo "Available SSH keys:"
            ssh-add -l || echo "No SSH keys found"
      - run:
          name: Ruby and Bundle Setup
          command: |
            ruby --version
            gem --version
            bundle --version

            # Fix Ruby 3.4+ compilation environment for macOS
            echo "üîß Setting up Ruby environment for macOS compilation..."
            export BUNDLE_BUILD__JSON="--with-cflags=-I$(brew --prefix)/include"
            export BUNDLE_BUILD__NOKOGIRI="--use-system-libraries"

            # Force modern Bundler version (avoid old 1.17.2 compatibility issues)
            echo "üì¶ Updating to modern Bundler..."
            gem install bundler -v '>= 2.4.0' --no-document || true
            bundle --version

            # Clean old bundler cache and regenerate
            rm -rf vendor/bundle .bundle Gemfile.lock || true

            # Configure bundler for macOS platform
            bundle config set --local path 'vendor/bundle'
            bundle config set --local deployment 'false'
            bundle config set --local platform 'x86_64-darwin-24'
            bundle config set --local without 'development test'

            # Generate new lockfile and install
            bundle lock --add-platform x86_64-darwin-24
            bundle install --jobs 4 --retry 3 --verbose
      - run:
          name: Fastlane
          command: |
            bundle update fastlane
            bundle exec fastlane $FASTLANE_LANE
      - store_artifacts:
          path: output/Game.ipa
      # Slack notifications
      - slack/notify:
          channel: fe-workout
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚ùå *iOS Ad-hoc Build Failed* on `${CIRCLE_BRANCH}` branch\n\n*Project:* ${CIRCLE_PROJECT_REPONAME}\n*Job:* Ad-hoc Distribution\n*Triggered by:* <@${CIRCLE_USERNAME}>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Build"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
      - slack/notify:
          channel: fe-workout
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üì± *iOS Ad-hoc Build Ready* on `${CIRCLE_BRANCH}` branch\n\n*Project:* ${CIRCLE_PROJECT_REPONAME}\n*Job:* Ad-hoc Distribution\n*Triggered by:* <@${CIRCLE_USERNAME}>\n\nüéâ Your .ipa file is ready for distribution!"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Download IPA"
                      },
                      "url": "${CIRCLE_BUILD_URL}/artifacts"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Build"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  beta:
    macos:
      xcode: "16.3.0"
    working_directory: /Users/distiller/project
    # default fastlane environment locations
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: beta
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "SHA256:dsEgjXw4QYHFwc9yaHjXqLT38fVvFU5UlAEhxlxGJL0"
      - run:
          name: Set Git User
          command: |
            git config --global user.email "fieldeng@circleci.com"
            git config --global user.name "Field Engineering CI User"
      - run:
          name: Add GitHub to known hosts
          command: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Test SSH connection to certificates repository
          command: |
            echo "Testing SSH connection to match repository..."
            ssh -T git@github.com || echo "SSH connection test complete (exit code $?)"
            echo "Available SSH keys:"
            ssh-add -l || echo "No SSH keys found"
      - run:
          name: Ruby and Bundle Setup
          command: |
            ruby --version
            gem --version
            bundle --version

            # Fix Ruby 3.4+ compilation environment for macOS
            echo "üîß Setting up Ruby environment for macOS compilation..."
            export BUNDLE_BUILD__JSON="--with-cflags=-I$(brew --prefix)/include"
            export BUNDLE_BUILD__NOKOGIRI="--use-system-libraries"

            # Force modern Bundler version (avoid old 1.17.2 compatibility issues)
            echo "üì¶ Updating to modern Bundler..."
            gem install bundler -v '>= 2.4.0' --no-document || true
            bundle --version

            # Clean old bundler cache and regenerate
            rm -rf vendor/bundle .bundle Gemfile.lock || true

            # Configure bundler for macOS platform
            bundle config set --local path 'vendor/bundle'
            bundle config set --local deployment 'false'
            bundle config set --local platform 'x86_64-darwin-24'
            bundle config set --local without 'development test'

            # Generate new lockfile and install
            bundle lock --add-platform x86_64-darwin-24
            bundle install --jobs 4 --retry 3 --verbose
      - aws-cli/setup:
          use_brew: true
          role_arn: ${AWS_ROLE_ARN}
          region: ${AWS_REGION}
      - run:
          name: Fastlane Testflight
          command: |
            bundle update fastlane
            bundle exec fastlane $FASTLANE_LANE
      - store_artifacts:
          path: output/Game.ipa
      - run:
          name: Create build info JSON
          command: |
            APP_VERSION=$(agvtool what-marketing-version -terse1)
            echo $APP_VERSION
            ZIP_NAME="app-${APP_VERSION}.zip"
            echo $ZIP_NAME
            zip -r $ZIP_NAME . -i ./build
            echo "export ZIP_NAME=${ZIP_NAME}" >> $BASH_ENV
            echo "export APP_VERSION=${APP_VERSION}" >> $BASH_ENV
            APP_VERSION=$(agvtool what-marketing-version -terse1)
            echo "{\"version\": \"${APP_VERSION}\", \"build\": \"${APP_VERSION}\", \"date\": \"$(date +"%Y-%m-%d %H:%M:%S")\"}" > build_info.json
      - aws-s3/copy:
          from: build_info.json
          to: s3://${S3_BUCKET_NAME}/releases/build_info.json
          arguments: |
            --metadata appVersion=${APP_VERSION},buildNumber=${APP_VERSION},environment=testflight
      - run:
          name: Update Amplify app
          command: |
            aws amplify update-app \
              --app-id $AMPLIFY_APP_ID \
              --platform IOS \
              --version ${APP_VERSION} \
              --release-notes "Build ${APP_VERSION} deployed to TestFlight"
      # Slack notifications
      - slack/notify:
          channel: fe-workout
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üö® *TestFlight Deployment Failed* on `${CIRCLE_BRANCH}` branch\n\n*Project:* ${CIRCLE_PROJECT_REPONAME}\n*Job:* Beta TestFlight\n*Triggered by:* <@${CIRCLE_USERNAME}>\n\n‚ùå The iOS app failed to deploy to TestFlight"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Build Logs"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Commit"
                      },
                      "url": "https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}"
                    }
                  ]
                }
              ]
            }
      - slack/notify:
          channel: fe-workout
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üöÄ *TestFlight Deployment Successful!* \n\n*Project:* ${CIRCLE_PROJECT_REPONAME}\n*Branch:* `${CIRCLE_BRANCH}`\n*Version:* ${APP_VERSION}\n*Triggered by:* <@${CIRCLE_USERNAME}>\n\n‚úàÔ∏è Your iOS app is now available on TestFlight!"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Open TestFlight"
                      },
                      "url": "https://appstoreconnect.apple.com/apps"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Build"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Download IPA"
                      },
                      "url": "${CIRCLE_BUILD_URL}/artifacts"
                    }
                  ]
                }
              ]
            }

workflows:
  build-test-adhoc:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: main
      - adhoc:
          filters:
            branches:
              only: /dev-.*/
          requires:
            - build-and-test
      - beta:
          filters:
            branches:
              only: main
          requires:
            - build-and-test

postgres:
  resource_limits:
    cpu: "1"
    memory: 2048M
