# Enhanced CircleCI Configuration with Secure Testing for Open Source
# This demonstrates secure testing strategies for projects with internal resources

version: 2.1

orbs:
  aws-s3: circleci/aws-s3@4.1.1
  aws-cli: circleci/aws-cli@5.4.0
  slack: circleci/slack@4.14.0

parameters:
  no-testflight:
    type: boolean
    default: false
    description: "Skip TestFlight deployment when set to true"
  
  maintainer-approved:
    type: boolean
    default: false
    description: "Maintainer approval for production testing access"
    
  production-testing:
    type: boolean
    default: false
    description: "Enable production-level testing with real secrets"
    
  use-test-environment:
    type: boolean
    default: true
    description: "Use isolated test environment (safe for external contributors)"

# Define different environment contexts
test-environment: &test-environment
  # Safe test environment - no real secrets
  API_BASE_URL: "https://test-api.circleci-demo.com"
  DATABASE_URL: "postgresql://test-db.circleci-demo.com/testdb" 
  AUTH_TOKEN: "test-token-safe-for-public-use"
  USE_MOCKS: "true"
  ENVIRONMENT: "test"
  SAFE_FOR_FORKS: "true"

staging-environment: &staging-environment
  # Staging environment - limited secrets for trusted users
  API_BASE_URL: "https://staging-api.circleci-demo.com"
  DATABASE_URL: "postgresql://staging-db.circleci-demo.com/stagingdb"
  USE_MOCKS: "false" 
  ENVIRONMENT: "staging"

# Jobs with different security levels
jobs:
  # Safe testing for external contributors
  test-external-safe:
    macos:
      xcode: "16.4.0"
    resource_class: m4pro.medium
    environment:
      <<: *test-environment
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    steps:
      - checkout
      - run:
          name: Security Check - External Contributor
          command: |
            if [ "$CIRCLE_PR_REPONAME" != "$CIRCLE_PROJECT_REPONAME" ]; then
              echo "üîí External contributor detected - using safe test environment"
              echo "‚úÖ Test environment: $API_BASE_URL"
              echo "‚úÖ Using mocks: $USE_MOCKS"
              echo "‚úÖ Safe for forks: $SAFE_FOR_FORKS"
            fi
      - run:
          name: Install Dependencies (Safe Mode)
          command: |
            # Install with restricted network access
            bundle config set --local without 'production'
            bundle install --jobs 4 --retry 3
      - run:
          name: Run Tests Against Mock Services
          command: |
            export TEST_MODE=true
            export MOCK_INTERNAL_API=true
            bundle exec fastlane test
      - run:
          name: Audit Test Execution
          command: |
            echo "=== SECURITY AUDIT ==="
            echo "Job: test-external-safe"
            echo "User: ${CIRCLE_USERNAME:-unknown}"
            echo "PR: ${CIRCLE_PR_NUMBER:-none}"
            echo "Repository: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            echo "Origin Repo: ${CIRCLE_PR_REPONAME:-same}"
            echo "Environment: $ENVIRONMENT"
            echo "Timestamp: $(date)"
            echo "Safe mode: $SAFE_FOR_FORKS"

  # Trusted testing for internal team
  test-internal-trusted:
    macos:
      xcode: "16.4.0"  
    resource_class: m4pro.medium
    environment:
      <<: *staging-environment
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    steps:
      - checkout
      - run:
          name: Security Check - Internal Team
          command: |
            echo "üîê Internal team member - using staging environment"
            echo "‚úÖ Staging environment: $API_BASE_URL" 
            echo "‚úÖ Real services: $USE_MOCKS"
      - run:
          name: Install Dependencies (Full Access)
          command: |
            bundle install --jobs 4 --retry 3
      - run:
          name: Run Tests Against Staging Services
          command: |
            export TEST_MODE=false
            bundle exec fastlane test

  # Production-level testing (requires approval)
  test-production-approved:
    macos:
      xcode: "16.4.0"
    resource_class: m4pro.medium
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
      ENVIRONMENT: "production-testing"
    steps:
      - checkout
      - run:
          name: Verify Production Testing Approval
          command: |
            if [ "$CIRCLE_PR_REPONAME" != "$CIRCLE_PROJECT_REPONAME" ] && [ "<< pipeline.parameters.maintainer-approved >>" != "true" ]; then
              echo "‚ùå Production testing requires maintainer approval for external PRs"
              echo "‚ÑπÔ∏è  Maintainer can approve by setting maintainer-approved=true parameter"
              exit 1
            fi
            echo "‚úÖ Production testing approved"
      - run:
          name: Generate Time-Limited Credentials
          command: |
            if [ "<< pipeline.parameters.maintainer-approved >>" = "true" ]; then
              echo "üîë Generating temporary credentials (1 hour validity)..."
              # In real implementation, this would generate actual temp credentials
              echo "export TEMP_AUTH_TOKEN=temp-$(date +%s)" >> $BASH_ENV
              echo "export CREDENTIAL_EXPIRY=$(date -d '+1 hour')" >> $BASH_ENV
            fi
      - run:
          name: Run Production-Level Tests
          command: |
            echo "üöÄ Running tests with production-level access"
            echo "‚è∞ Credentials expire at: $CREDENTIAL_EXPIRY"
            # Run comprehensive tests with real (but time-limited) access
            bundle exec fastlane test
      - run:
          name: Revoke Temporary Credentials
          command: |
            echo "üîí Revoking temporary credentials"
            # Clean up any temporary access
            unset TEMP_AUTH_TOKEN
          when: always

  # Build job (same as before but with environment awareness)
  build-and-test:
    macos:
      xcode: "16.4.0"
    resource_class: m4pro.medium
    working_directory: /Users/distiller/project
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: Determine Build Environment
          command: |
            if [ "$CIRCLE_PR_REPONAME" != "$CIRCLE_PROJECT_REPONAME" ]; then
              echo "üîí External contributor - safe build mode"
              echo "export BUILD_MODE=safe" >> $BASH_ENV
            else
              echo "üîê Internal team - full build mode"  
              echo "export BUILD_MODE=full" >> $BASH_ENV
            fi
      - run:
          name: Ruby and Bundle Setup
          command: |
            ruby --version
            gem --version
            bundle --version
            
            # Configure based on build mode
            if [ "$BUILD_MODE" = "safe" ]; then
              bundle config set --local without 'production development'
            fi
            
            export BUNDLE_BUILD__JSON="--with-cflags=-I$(brew --prefix)/include"
            export BUNDLE_BUILD__NOKOGIRI="--use-system-libraries"
            gem install bundler -v '>= 2.4.0' --no-document || true
            bundle --version
            rm -rf vendor/bundle .bundle Gemfile.lock || true
            bundle config set --local path 'vendor/bundle'
            bundle config set --local deployment 'false'
            bundle config set --local platform 'x86_64-darwin-24'
            bundle lock --add-platform x86_64-darwin-24
            bundle install --jobs 4 --retry 3 --verbose
      - run:
          name: Force Compatible iOS SDK
          command: |
            echo "Setting compatible iOS SDK for build..."
            LATEST_SDK=$(xcodebuild -showsdks | grep iphoneos | tail -1 | awk '{print $NF}')
            echo "Latest available iOS SDK: $LATEST_SDK"
            if [ ! -z "$LATEST_SDK" ]; then
              echo "export IPHONEOS_DEPLOYMENT_TARGET=14.0" >> $BASH_ENV
              echo "export SDKROOT=$LATEST_SDK" >> $BASH_ENV
              echo "Set iOS Deployment Target to 14.0"
              echo "Set SDK Root to $LATEST_SDK"
            fi
      - run:
          name: Fastlane
          command: |
            bundle update fastlane
            bundle exec fastlane $FASTLANE_LANE
      - store_artifacts:
          path: output
      - store_test_results:
          path: output/scan

  # Validation job (enhanced with security checks)
  validate:
    macos:
      xcode: "16.3.0"
    resource_class: m4pro.medium
    working_directory: /Users/distiller/project
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: validate_app
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: Security Validation for External Contributors
          command: |
            if [ "$CIRCLE_PR_REPONAME" != "$CIRCLE_PROJECT_REPONAME" ]; then
              echo "üîç Performing additional security validation for external PR"
              
              # Check for suspicious patterns in code changes
              if git diff --name-only HEAD~1 | grep -E "\.(sh|py|rb|js|ts)$"; then
                echo "‚ö†Ô∏è  Script files modified - requires extra review"
                git diff HEAD~1 -- "*.sh" "*.py" "*.rb" "*.js" "*.ts" | head -100
              fi
              
              # Check for new network calls or secret access attempts
              if git diff HEAD~1 | grep -i -E "(curl|wget|http|api_key|secret|token|password)"; then
                echo "‚ö†Ô∏è  Network or secret-related changes detected"
                git diff HEAD~1 | grep -i -E "(curl|wget|http|api_key|secret|token|password)" | head -20
              fi
            fi
      - run:
          name: Ruby and Bundle Setup
          command: |
            ruby --version
            bundle config set --local without 'production development'
            bundle install --jobs 4 --retry 3
      - run:
          name: Validate App Configuration
          command: |
            echo "Running comprehensive app validation..."
            bundle exec fastlane $FASTLANE_LANE

# Workflows with security-aware job selection
workflows:
  # Main workflow - chooses appropriate testing based on contributor type
  secure-build-test:
    when:
      not: << pipeline.parameters.no-testflight >>
    jobs:
      # Always run validation first
      - validate
      
      # External contributors get safe testing
      - test-external-safe:
          filters:
            branches:
              ignore: main
          requires:
            - validate
            
      # Internal team gets trusted testing on non-main branches  
      - test-internal-trusted:
          context: staging-secrets
          filters:
            branches:
              ignore: main
          requires:
            - validate
            
      # Main branch gets full build (internal team only)
      - build-and-test:
          filters:
            branches:
              only: main
          requires:
            - validate
            
      # Production testing only with approval
      - test-production-approved:
          context: production-secrets
          filters:
            branches:
              ignore: main
          requires:
            - validate
          when:
            and:
              - << pipeline.parameters.maintainer-approved >>
              - << pipeline.parameters.production-testing >>

  # Weekly scheduled builds (secure)
  weekly-build:
    triggers:
      - schedule:
          cron: "0 19 * * 5"  # 3pm EST on Fridays
          filters:
            branches:
              only: main
    jobs:
      - validate
      - build-and-test:
          context: production-secrets
          requires:
            - validate
